[{"title":"翻墙的捷径","date":"2017-04-12T01:01:03.000Z","path":"2017/04/12/outGFW/","text":"防火长城（英文名称Great Firewall of China，简写为Great Firewall，缩写GFW），也称中国防火墙或中国国家防火墙，指中华人民共和国政府在其管辖因特网内部建立的多套网络审查系统的总称。 以前觉得这个gfw是“万恶之源”，让我们和外面的世界隔绝。而现在看来它的存在是有意义的。当看到爸妈姨奶的微信，微博充斥着谣言（应该没那么严重），而他们却深陷其中，还不知觉。我们无法判断另一端所说的那120个字是不是句句真真，自媒体的存在是存在很多好处，让我们以第三视角了解事情，可这个第三视角也未必不是第一视角所扮演的，而外面的世界更存在着让我们无法判断的声音，那时候的我们更无法看清事情真相，我们可能是人云亦云，不知不觉就成为谣言的散播者。gfw的消失的那天，也是国民自我意识觉醒的那一天，我们会有自己的判断力，会去深究事情的真伪。 上面只是自己的一些感想，下面开始入正题。 对于一个程序猿来说，翻墙应该是必备技能。去了解最新的技术什么的（还有其他你懂的）。众所周知的，我们可以通过搭建海外服务器，然后通过vpn（虚拟专用网络），原本是企业网络中使用的，目的是让外部网络可以访问内网服务器资源。我们可以在godaddy等其他网站上租赁一个海外的服务器（当然那个服务器所在国不能存在gfw，像朝鲜，古巴就不行了，貌似也没有外租，但听说在goddaddy上的服务器很容易被gfw盯上），而对于个人用户来讲，搭建一个海外服务器是有点小题大做了。现在要讲一种新的翻墙方式 对于hosts大家不陌生吧，那个C:\\Windows\\System32\\drivers\\etc\\hosts（别问我只给win的目录，因为我没有mac，用mac的话就百度好了），废话不说改这里的文件需要管理员权限。我们的浏览器在输入网址后，一般会进行域名的解析。其实在域名解析前还有一步，就是在计算机的Hosts中寻找对应的ip地址，一旦找到就会立即打开对应网页（话说hosts还是以前在用一款chrome插件时了解的）。嗯，这就是我们翻墙的关键，利用浏览器的机制。而gfw隔不长时间就会添加一些新ip，所以有时候一些hosts会失效，那这个hosts文件到哪去下载呢，其实github上有好多个一直维护的项目（万能的github），另外还有一个地方就是—老D的博客，其实还有很多其他的论坛有维护吧，不过改hosts这种事还是比较危险的，如果别人弄个钓鱼网站给你就完蛋了，所以我的建议是，如果日常只是访问一些大型的网站像youtube，google，fb，tw等网站的话还是可以用hosts的。 以前我用的那个chorme翻墙插件估计就是利用hosts来实现的。 ps：以前那个balleon.com的域名已经过期了，由于资金问题也没有再续了（拖出去续了。。），其实我蛮喜欢那个域名的，好记还是个国际顶级域名总有一天要买回来的，还有一个事就是把博客托管到了coding上了，大家可以访问Yan的博客。","tags":[{"name":"gfw","slug":"gfw","permalink":"http://yoursite.com/tags/gfw/"}]},{"title":"关于正则运算的一个注意事项","date":"2017-03-27T14:20:38.000Z","path":"2017/03/27/post-1/","text":"在freecodecamp上做的一道题目：1234567如果给定的字符串是回文，返回true，反之，返回false。如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。注意你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。函数参数的值可以为&quot;racecar&quot;，&quot;RaceCar&quot;和&quot;race CAR&quot;。 其中涉及到正则运算，需要我们找到所有的非字母数字的字符，/[\\W]/g 这可以全局找到非字母数字的字符，其中\\W是匹配所有非字母数字字符的，需要注意的是这里并没有包括下划线”“，所以我们要在后面另外加一个”_”来特殊匹配它。","tags":[{"name":"正则","slug":"正则","permalink":"http://yoursite.com/tags/正则/"}]},{"title":"html数据储存","date":"2017-03-27T12:32:03.000Z","path":"2017/03/27/post/","text":"突然想起老师以前提过做一个记录轨迹的本地应用，当时还不了解怎么储存数据，只能零时记录下一个值存储在一个数组里面，刷新后就消失了，只有一直开着才能实现完整的功能。这几天在看w3school的时候看到关于web存储的那一片，终于可以把这个问题解决了。在w3school中提到两种客户端存储数据的方法：localStorage和sessionStorage。两种方法存在一些区别：localStorage是不受时间限制的数据存储，即使刷新或者重启浏览器都不会删除，而sessionStorage刷新后就会消失，在chrome浏览器中，我们可以进入开发者模式，打开Application,在storage列表中看到Local Storage和Session Storage我们可以查看浏览器保存下来的Local Storage。使用localStorage可以在不影响网站性能前提下存储大量数据，需要注意的是，每个网站只能访问自己的那个数据（其实这也是毋庸置疑的，可以互相访问岂不是非常危险）其实以上两个存储对象过去的实现都是通过cookie实现但是cookie并不适合大量数据的存储，所以出现的storage可以解决这个问题。 关于存储的问题，还有浏览器Cookie和Cache这两个形式，Cookie用在与服务器的请求中，不论是否需要都会携带，常常用在密码和验证上，在登录过后，跳转到下一个页面继续保持登录状态就需要用到Cookie了。Cache呢，缓存是保存一些从服务器接受的数据和session很像，但是当超过一定额度时会自动清除，这些没被清除的内容，即使离线状态也可以访问。","tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"ajax请求及跨域问题（一）","date":"2017-03-10T04:13:28.567Z","path":"2017/03/10/ajax请求及跨域问题(一）/","text":"浏览器的同源策略 XHR对象只能访问与包含它的页面位于同一域中的资源，这种安全策略可以预防某些恶意行为 ——-《JavaScript高级程序设计》 虽然同源策略保护了我们远离恶意行为，但是跨域访问资源又是必不可少的，所以产生了一些解决的方案，其原理大概就是从浏览器端或者服务器端来实现的。 先说从浏览器端的解决方案： jsonp（动态设置script标签） 在网上找到的一些资源里把这jsonp和动态设置script分开来，但我觉得两个原理是相同的。都是动态得添加一个script标签。 jsonp与json没有什么必然的联系，一个是请求数据的方式，一个是一种数据格式。jsonp中的数据并不是简单的json， 123456789fn(&#123; &quot;people&quot;:[&#123; &quot;firstName&quot;: &quot;Brett&quot;, &quot;lastName&quot;:&quot;McLaughlin&quot;, &#125;,&#123; &quot;firstName&quot;:&quot;Jason&quot;, &quot;lastName&quot;:&quot;Hunter&quot;, &#125;]&#125;) 原本的json文件被包含在一个函数内，我们就是要调用这个js文件，然后执行这个fn函数，而这个fn函数我们可以在调用中自己定义，怎么处理数据就是自己的事情了。jQuery已经把jsonp写入到ajax方法中去了，在使用时我们就可以像使用普通的ajax请求一样拿到跨域数据。不必在意jQuery内部做了什么。","tags":[]},{"title":"开发中注意的安全问题","date":"2017-02-27T07:24:01.276Z","path":"2017/02/27/开发中注意的安全问题/","text":"开发中注意的安全问题 安全问题不论在哪都是备受关注的，防火墙可以抵挡一部分ddos攻击，而在开发过程中涉及安全问题的东西往往比能否实现功能更重要。 漏洞类型 设计漏洞 一般通过评审来避免这种漏洞，这些都是在开会时进行评估的，主要遵守三个原则： 关键操作必须在后台控制 关键信息不允许明文显示（掩码 ） 不返回，不提交不必要的信息 输入漏洞 最实际的例子是网银中密码输入框，必须安装插件才能输入，这是为了避免键盘监听，获取输入的信息，安装插件和使用软键盘可以避免这类漏洞（这类控件一般为ActiveX，是用c，c++来实现的）。 网络漏洞 这是在数据传输过程中会发生的（使用抓包工具（fiddler）拦截数据），常常使用加密方式来避免。 对称加密（RSA）：这是通过公私钥来实现前端加密和后台解密的，而密钥在每次请求时都会改变。 储存漏洞 在数据库中发生的，当数据库被别人获取，如果都是明文展示的话很容易被人利用， 非对称加密（不可逆加密，MD5）：只能加密，不能再解密，通过一种复杂的运算方法得到一串32位或64位无规则字符（其实有算法那就一定有规则咯。。）存储在数据库，只要相同的字符加密后的MD5值也就相同，在储存密码时使用MD5值，即使得到数据库中的那串MD5值也很难推算出密码，MD5也用在校验数据完整性中，可以避免病毒植入到文件中，而毫无察觉。 常见的容易发生安全事故的地方就这几个了（怎么感觉像是建筑行业的事故，看来大学学到的就这个了。。），不过这也不比建筑业出现的事故小，只要发生了事故，损失的也不比其他事故小。 也不比其他事故小。","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"}]}]