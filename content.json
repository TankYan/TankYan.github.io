[{"title":"html数据储存","date":"2017-03-27T12:32:03.000Z","path":"2017/03/27/post/","text":"突然想起老师以前提过做一个记录轨迹的本地应用，当时还不了解怎么储存数据，只能零时记录下一个值存储在一个数组里面，刷新后就消失了，只有一直开着才能实现完整的功能。这几天在看w3school的时候看到关于web存储的那一片，终于可以把这个问题解决了。在w3school中提到两种客户端存储数据的方法：localStorage和sessionStorage。两种方法存在一些区别：localStorage是不受时间限制的数据存储，即使刷新或者重启浏览器都不会删除，而sessionStorage刷新后就会消失，在chrome浏览器中，我们可以进入开发者模式，打开Application,在storage列表中看到Local Storage和Session Storage我们可以查看浏览器保存下来的Local Storage。使用localStorage可以在不影响网站性能前提下存储大量数据，需要注意的是，每个网站只能访问自己的那个数据（其实这也是毋庸置疑的，可以互相访问岂不是非常危险）其实以上两个存储对象过去的实现都是通过cookie实现但是cookie并不适合大量数据的存储，所以出现的storage可以解决这个问题。 关于存储的问题，还有浏览器Cookie和Cache这两个形式，Cookie用在与服务器的请求中，不论是否需要都会携带，常常用在密码和验证上，在登录过后，跳转到下一个页面继续保持登录状态就需要用到Cookie了。Cache呢，缓存是保存一些从服务器接受的数据和session很像，但是当超过一定额度时会自动清除，这些没被清除的内容，即使离线状态也可以访问。","tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"ajax请求及跨域问题（一）","date":"2017-03-10T04:13:28.567Z","path":"2017/03/10/ajax请求及跨域问题(一）/","text":"浏览器的同源策略 XHR对象只能访问与包含它的页面位于同一域中的资源，这种安全策略可以预防某些恶意行为 ——-《JavaScript高级程序设计》 虽然同源策略保护了我们远离恶意行为，但是跨域访问资源又是必不可少的，所以产生了一些解决的方案，其原理大概就是从浏览器端或者服务器端来实现的。 先说从浏览器端的解决方案： jsonp（动态设置script标签） 在网上找到的一些资源里把这jsonp和动态设置script分开来，但我觉得两个原理是相同的。都是动态得添加一个script标签。 jsonp与json没有什么必然的联系，一个是请求数据的方式，一个是一种数据格式。jsonp中的数据并不是简单的json， 123456789fn(&#123; &quot;people&quot;:[&#123; &quot;firstName&quot;: &quot;Brett&quot;, &quot;lastName&quot;:&quot;McLaughlin&quot;, &#125;,&#123; &quot;firstName&quot;:&quot;Jason&quot;, &quot;lastName&quot;:&quot;Hunter&quot;, &#125;]&#125;) 原本的json文件被包含在一个函数内，我们就是要调用这个js文件，然后执行这个fn函数，而这个fn函数我们可以在调用中自己定义，怎么处理数据就是自己的事情了。jQuery已经把jsonp写入到ajax方法中去了，在使用时我们就可以像使用普通的ajax请求一样拿到跨域数据。不必在意jQuery内部做了什么。","tags":[]},{"title":"开发中注意的安全问题","date":"2017-02-27T07:24:01.276Z","path":"2017/02/27/开发中注意的安全问题/","text":"开发中注意的安全问题 安全问题不论在哪都是备受关注的，防火墙可以抵挡一部分ddos攻击，而在开发过程中涉及安全问题的东西往往比能否实现功能更重要。 漏洞类型 设计漏洞 一般通过评审来避免这种漏洞，这些都是在开会时进行评估的，主要遵守三个原则： 关键操作必须在后台控制 关键信息不允许明文显示（掩码 ） 不返回，不提交不必要的信息 输入漏洞 最实际的例子是网银中密码输入框，必须安装插件才能输入，这是为了避免键盘监听，获取输入的信息，安装插件和使用软键盘可以避免这类漏洞（这类控件一般为ActiveX，是用c，c++来实现的）。 网络漏洞 这是在数据传输过程中会发生的（使用抓包工具（fiddler）拦截数据），常常使用加密方式来避免。 对称加密（RSA）：这是通过公私钥来实现前端加密和后台解密的，而密钥在每次请求时都会改变。 储存漏洞 在数据库中发生的，当数据库被别人获取，如果都是明文展示的话很容易被人利用， 非对称加密（不可逆加密，MD5）：只能加密，不能再解密，通过一种复杂的运算方法得到一串32位或64位无规则字符（其实有算法那就一定有规则咯。。）存储在数据库，只要相同的字符加密后的MD5值也就相同，在储存密码时使用MD5值，即使得到数据库中的那串MD5值也很难推算出密码，MD5也用在校验数据完整性中，可以避免病毒植入到文件中，而毫无察觉。 常见的容易发生安全事故的地方就这几个了（怎么感觉像是建筑行业的事故，看来大学学到的就这个了。。），不过这也不比建筑业出现的事故小，只要发生了事故，损失的也不比其他事故小。 也不比其他事故小。","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"}]}]